/*You need to print the node which has the highest value in the binary tree using the BFS(Iterative) approach.
 And if the tree is empty, the output should be -1.*/
import java.util.*;


class Node {
    int data;
    Node left, right;

    public Node(int value) {
        data = value;
        left = right = null;
    }
}

class BinaryTree {

    Node root;

    BinaryTree() {
        root = null;
    }

    // Method to construct a binary tree from the given array
    public Node insertNode(int[] elementsArr, Node node, int i) {
        if (i < elementsArr.length) {
            node = new Node(elementsArr[i]);

            node.left = insertNode(elementsArr, node.left, 2 * i + 1);
            node.right = insertNode(elementsArr, node.right, 2 * i + 2);
        }
        return node;
    }

    // Method to find the largest value in the tree
    public int findMax(Node node) {
        int max = node.data;
        Queue<Node> queue = new LinkedList<>();
        queue.add(node);
        while (!queue.isEmpty()) {
            Node first = queue.remove();
            if (first.data > max) {
                max = first.data;
            }
            if (first.left != null) {
                queue.add(first.left);
            }
            if (first.right != null) {
                queue.add(first.right);
            }
        }
        return max;
    }
}
public class BFSIterativeHighestValue{
    public static void main(String[] x){
        BinaryTree tree = new BinaryTree();

        int size;
        Scanner sc = new Scanner(System.in);
        size = sc.nextInt();

        if(size == 0){
            System.out.println("-1");
        }

        else if (size < 0){
            System.out.println("Size should be a positive integer");
        }

        else{
            int[] elementsArr = new int[size];
            for(int i = 0; i < size; i++){
                elementsArr[i] = sc.nextInt();
            }

            tree.root = tree.insertNode(elementsArr,tree.root,0);

            System.out.println(tree.findMax(tree.root));
        }
    }
}
