import java.util.*;

class Node {
    int data;
    Node left, right;

    Node(int value) {
        data = value;
        left = right = null;
    }
}

class Tree {
    Node root;

    Tree() {
        root = null;
    }

    // Method to construct a binary tree from the given array
    public Node insertNode(int[] elementsArr, Node node, int i) {
        if(i < elementsArr.length){
            node = new Node(elementsArr[i]);
            node.left = insertNode(elementsArr,node.left,2 * i + 1);
            node.right = insertNode(elementsArr,node.right,2 * i + 2);
        }
        return node;
    }
    int maxheight(Node node){
        if(node==null){
            return 0;
        }
        else {
        int lheight=maxheight(node.left);
        int rheight=maxheight(node.right);
        if(lheight>rheight){
            return lheight+1;
        }
        else {
            return rheight+1;
        }
        }
    }

    // Method to traverse the elements of a tree using BFS (level-order traversal) in the spiral order
    void spiralOrder(Node node) {
        boolean ltr=false;
        int height=maxheight(node);
        for(int i=1;i<=height;i++){
            printNodes(node,i,1,ltr);
            ltr=!ltr;
        }
    }

    void printNodes(Node node, int level, int currentLevel, boolean ltr) {
        if (node==null){
            return;
        }
        if(level==currentLevel){
            System.out.print(node.data+" ");
        }
        if(ltr){
            printNodes(node.left,level,currentLevel+1,ltr);
            printNodes(node.right,level,currentLevel+1,ltr);
        }
        else {
            printNodes(node.right,level,currentLevel+1,ltr);
            printNodes(node.left,level,currentLevel+1,ltr);
        }
    }
    }

// WARNING: Do not edit the code given below; otherwise the test cases might fail
class SpiralLevelOrderTraversal {
    public static void main(String[] x) {
        Tree tree = new Tree();

        int size;
        Scanner sc = new Scanner(System.in);
        size = sc.nextInt();
        if (size < 0){
            System.out.println("Size should be a positive integer");
        }

        else{
            int[] elementsArr = new int[size];
            for(int i = 0; i < size; i++) {
                elementsArr[i] = sc.nextInt();
            }
            tree.root = tree.insertNode(elementsArr, tree.root, 0);
            tree.spiralOrder(tree.root);
        }
    }
}
